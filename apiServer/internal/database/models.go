// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type UserRole string

const (
	UserRoleCreator  UserRole = "creator"
	UserRoleLabeller UserRole = "labeller"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type CreatorBalance struct {
	CreatorID uuid.UUID
	Lamports  string
}

type LabellerBalance struct {
	LabellerID uuid.UUID
	Lamports   string
}

type Lastusedblock struct {
	Lastusedaddress string
}

type Project struct {
	ID        uuid.UUID
	Name      string
	Started   sql.NullBool
	Completed sql.NullBool
	CreatorID uuid.UUID
	Votes     int32
}

type ProjectImage struct {
	PublicID  string
	ProjectID uuid.UUID
	SecureUrl string
}

type User struct {
	ID       uuid.UUID
	Username string
	Password string
	Role     NullUserRole
}

type Vote struct {
	VoterID   uuid.UUID
	ProjectID uuid.UUID
	PublicID  string
}
