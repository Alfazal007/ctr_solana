// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: votes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :one
insert into votes
    (voter_id, project_id, public_id)
        values ($1, $2, $3) returning voter_id, project_id, public_id
`

type CreateVoteParams struct {
	VoterID   uuid.UUID
	ProjectID uuid.UUID
	PublicID  string
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote, arg.VoterID, arg.ProjectID, arg.PublicID)
	var i Vote
	err := row.Scan(&i.VoterID, &i.ProjectID, &i.PublicID)
	return i, err
}

const getExistingVote = `-- name: GetExistingVote :one
select voter_id, project_id, public_id from votes
	where voter_id=$1 AND project_id=$2
`

type GetExistingVoteParams struct {
	VoterID   uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetExistingVote(ctx context.Context, arg GetExistingVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, getExistingVote, arg.VoterID, arg.ProjectID)
	var i Vote
	err := row.Scan(&i.VoterID, &i.ProjectID, &i.PublicID)
	return i, err
}

const getVotesForProject = `-- name: GetVotesForProject :many
SELECT
    v.public_id,
    COUNT(v.public_id) AS vote_count,
    pi.secure_url
		FROM
			votes v
			JOIN
				project_images pi
				ON v.public_id = pi.public_id
				WHERE
					v.project_id = $1
					GROUP BY
						v.public_id,
						pi.secure_url
`

type GetVotesForProjectRow struct {
	PublicID  string
	VoteCount int64
	SecureUrl string
}

func (q *Queries) GetVotesForProject(ctx context.Context, projectID uuid.UUID) ([]GetVotesForProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getVotesForProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVotesForProjectRow
	for rows.Next() {
		var i GetVotesForProjectRow
		if err := rows.Scan(&i.PublicID, &i.VoteCount, &i.SecureUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
