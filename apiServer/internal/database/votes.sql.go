// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: votes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :one
insert into votes
    (voter_id, project_id, public_id)
        values ($1, $2, $3) returning voter_id, project_id, public_id
`

type CreateVoteParams struct {
	VoterID   uuid.UUID
	ProjectID uuid.UUID
	PublicID  string
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote, arg.VoterID, arg.ProjectID, arg.PublicID)
	var i Vote
	err := row.Scan(&i.VoterID, &i.ProjectID, &i.PublicID)
	return i, err
}

const getExistingVote = `-- name: GetExistingVote :one
select voter_id, project_id, public_id from votes
	where voter_id=$1 AND project_id=$2
`

type GetExistingVoteParams struct {
	VoterID   uuid.UUID
	ProjectID uuid.UUID
}

func (q *Queries) GetExistingVote(ctx context.Context, arg GetExistingVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, getExistingVote, arg.VoterID, arg.ProjectID)
	var i Vote
	err := row.Scan(&i.VoterID, &i.ProjectID, &i.PublicID)
	return i, err
}
