// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: creator_balance.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addPublicKey = `-- name: AddPublicKey :exec
update creator_balance
	set creator_pk_bs64=$1 where creator_id=$2
`

type AddPublicKeyParams struct {
	CreatorPkBs64 sql.NullString
	CreatorID     uuid.UUID
}

func (q *Queries) AddPublicKey(ctx context.Context, arg AddPublicKeyParams) error {
	_, err := q.db.ExecContext(ctx, addPublicKey, arg.CreatorPkBs64, arg.CreatorID)
	return err
}

const deductCreatorBalance = `-- name: DeductCreatorBalance :exec
update creator_balance
	set lamports=$1 where creator_id=$2
`

type DeductCreatorBalanceParams struct {
	Lamports  string
	CreatorID uuid.UUID
}

func (q *Queries) DeductCreatorBalance(ctx context.Context, arg DeductCreatorBalanceParams) error {
	_, err := q.db.ExecContext(ctx, deductCreatorBalance, arg.Lamports, arg.CreatorID)
	return err
}

const getCreatorBalance = `-- name: GetCreatorBalance :one
select creator_id, lamports, creator_pk_bs64 from creator_balance
	where creator_id=$1
`

func (q *Queries) GetCreatorBalance(ctx context.Context, creatorID uuid.UUID) (CreatorBalance, error) {
	row := q.db.QueryRowContext(ctx, getCreatorBalance, creatorID)
	var i CreatorBalance
	err := row.Scan(&i.CreatorID, &i.Lamports, &i.CreatorPkBs64)
	return i, err
}

const getCreatorBalanceViaPK = `-- name: GetCreatorBalanceViaPK :one
select creator_id, lamports, creator_pk_bs64 from creator_balance
	where creator_pk_bs64=$1
`

func (q *Queries) GetCreatorBalanceViaPK(ctx context.Context, creatorPkBs64 sql.NullString) (CreatorBalance, error) {
	row := q.db.QueryRowContext(ctx, getCreatorBalanceViaPK, creatorPkBs64)
	var i CreatorBalance
	err := row.Scan(&i.CreatorID, &i.Lamports, &i.CreatorPkBs64)
	return i, err
}

const insertCreatorBalance = `-- name: InsertCreatorBalance :exec
INSERT INTO creator_balance (creator_id, lamports)
	VALUES ($1, $2)
`

type InsertCreatorBalanceParams struct {
	CreatorID uuid.UUID
	Lamports  string
}

func (q *Queries) InsertCreatorBalance(ctx context.Context, arg InsertCreatorBalanceParams) error {
	_, err := q.db.ExecContext(ctx, insertCreatorBalance, arg.CreatorID, arg.Lamports)
	return err
}
