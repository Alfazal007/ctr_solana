// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: labeller_balance.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deductBalance = `-- name: DeductBalance :exec
update labeller_balance set lamports=$1 where labeller_id=$2
`

type DeductBalanceParams struct {
	Lamports   string
	LabellerID uuid.UUID
}

func (q *Queries) DeductBalance(ctx context.Context, arg DeductBalanceParams) error {
	_, err := q.db.ExecContext(ctx, deductBalance, arg.Lamports, arg.LabellerID)
	return err
}

const getLabellerBalance = `-- name: GetLabellerBalance :one
select labeller_id, lamports from labeller_balance
	where labeller_id=$1
`

func (q *Queries) GetLabellerBalance(ctx context.Context, labellerID uuid.UUID) (LabellerBalance, error) {
	row := q.db.QueryRowContext(ctx, getLabellerBalance, labellerID)
	var i LabellerBalance
	err := row.Scan(&i.LabellerID, &i.Lamports)
	return i, err
}

const upsertLabellerBalance = `-- name: UpsertLabellerBalance :exec
INSERT INTO labeller_balance (labeller_id, lamports)
	VALUES ($1, $2)
		ON CONFLICT (labeller_id)
			DO UPDATE SET lamports = $2
`

type UpsertLabellerBalanceParams struct {
	LabellerID uuid.UUID
	Lamports   string
}

func (q *Queries) UpsertLabellerBalance(ctx context.Context, arg UpsertLabellerBalanceParams) error {
	_, err := q.db.ExecContext(ctx, upsertLabellerBalance, arg.LabellerID, arg.Lamports)
	return err
}
